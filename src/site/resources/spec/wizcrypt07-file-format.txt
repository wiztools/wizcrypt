

     WizCrypt07 File Format Specification
     ====================================


1. INTRODUCTION

 WizCrypt07 is an encryption file format used by OpenSource file
 encryption software WizCrypt:

 http://wizcrypt.wiztools.org/

2. WizCrypt07 File Extension

 The recommended file extension for this format is `.wiz'.

3. FILE FORMAT

 The WizCrypt07 file format:

      +-----------------------+
      | WizCrypt07 (in ASCII) | --- First 10 bytes - signature "WizCrypt07"
      |-----------------------| --+
      |   [Gzip Compressed]   |   |
      |+---------------------+|   |
      || md5 sum of password || --|-> The hash of the password
      |+---------------------+|   |
      |+---------------------+|   |
      || len |   algorithm   || --|-> Algorithm name length, and algorithm
      |+---------------------+|   |
      |+---------------------+|   |
      ||                     ||   |
      ||                     ||   |
      ||                     ||   | GZip compressed
      ||                     ||   |
      ||  [ALGO] Encrypted   ||   |
      ||        Data         ||   |
      ||                     ||   |
      ||                     ||   |
      ||                     ||   |
      ||                     ||   |
      |+---------------------+|   |
      +-----------------------+ --+

3.1. MAGIC NUMBER (SIGNATURE)

 The first 10 bytes of the file is the signature of the format. The
 ASCII text:

   W i z C r y p t 0 7

 consisting of 10 characters identifies the format as WizCrypt07.

3.2. DATA PART

 The data part of a WizCrypt07 is compressed using the GZip format.
 This format gives the advantages:

 * The final output is compressed
 * GZip's CRC check validates consistency
 * Can use GZip's recovery tools in case of data-corruption

 This also has the disadvantage:

 * Encryption/Decryption of WizCrypt07 has the additional overhead
   of compressing/de-compressing in GZip format.

 The DATA PART is further divided into the following parts:

 * MD5 hash of the key used in encryption
 * Algorithm length and name
 * The actual data encrypted using the key

3.2.1. MD5 KEY HASH

 The md5 hash of the key (UTF-8 encoded) is computed thus:

        import java.security.MessageDigest;

        // ...

        byte[] passKey = "mypassword".getBytes("UTF-8");

        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(passKey);
        byte[] hash = md.digest();

 Note: The hash is stored as it is. It is not further encoded.

3.2.2. ALGORITHM LENGTH AND NAME

 The next sequence of two bytes have the length of the algorithm. For example,
 if `RC4' algorithm is used, the length stored is three. For `Blowfish', the
 length is eight.

 The length of the algorithm can be of maximum size 99. The length is stored as
 ASCII text. For example, the value three is stored as: `03'.

 The 5 bytes following the password hash would be like this if `RC4' is used:

         +-------------------+
         | 0 | 3 | R | C | 4 |
         +-------------------+

 If `Blowfish' algorithm is used, the 10 bytes would be:

         +---------------------------------------+
         | 0 | 8 | B | l | o | w | f | i | s | h |
         +---------------------------------------+

3.2.3. ENCRYPTED DATA

 The data of the source is encrypted using the key and algorithm specified in
 the previous headers.

4. AUTHOR

 This file-format specification is written by SUBHASH CHANDRAN S. Address:

 SUBHASH CHANDRAN S
 Software Engineer
 SpikeSource Software Pvt. Ltd.
 Tower A, 7th Floor, Diamond District,
 150, Airport Road,
 Bangalore - 560 008
 Ph: +91 80 41810800
 
 Email: subwiz@gmail.com
